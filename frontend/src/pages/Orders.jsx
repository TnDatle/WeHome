import React, { useEffect, useState } from "react";
import {
  Container,
  Card,
  Table,
  Badge,
  Spinner,
  Button,
  Nav,
} from "react-bootstrap";
import { useUser } from "../context/UserContext";
import { db } from "../config/Firebase";
import {
  collection,
  query,
  where,
  orderBy,
  getDocs,
  updateDoc,
  doc,
} from "firebase/firestore";
import Swal from "sweetalert2";
import "../style/Orders.css";

export default function Orders() {
  const { user, loading } = useUser();
  const [orders, setOrders] = useState([]);
  const [activeTab, setActiveTab] = useState("current");
  const [fetching, setFetching] = useState(true);

  // ‚úÖ L·∫•y ƒë∆°n h√†ng t·ª´ Firestore
  useEffect(() => {
    const fetchOrders = async () => {
      if (!user) return setFetching(false); // ch∆∞a ƒëƒÉng nh·∫≠p

      try {
        setFetching(true);
        const q = query(
          collection(db, "Orders"),
          where("userID", "==", user.uid),
          orderBy("createdAt", "desc")
        );
        const querySnapshot = await getDocs(q);
        const data = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setOrders(data);
      } catch (err) {
        console.error("L·ªói khi truy v·∫•n ƒë∆°n h√†ng:", err);
      } finally {
        setFetching(false);
      }
    };

    fetchOrders();
  }, [user]);

  // üîπ Ph√¢n lo·∫°i ƒë∆°n h√†ng
  const currentOrders = orders.filter(
    (o) =>
      o.status === "Ch·ªù x·ª≠ l√Ω" ||
      o.status === "ƒêang x·ª≠ l√Ω" ||
      o.status === "ƒêang giao"
  );
  const historyOrders = orders.filter(
    (o) => o.status === "Ho√†n th√†nh" || o.status === "ƒê√£ h·ªßy"
  );

  // üîπ Badge tr·∫°ng th√°i ƒë∆°n h√†ng
  const getBadgeVariant = (status) => {
    switch (status) {
      case "Ch·ªù x·ª≠ l√Ω":
        return "warning";
      case "ƒêang giao":
        return "info";
      case "Ho√†n th√†nh":
        return "success";
      case "ƒê√£ h·ªßy":
        return "secondary";
      default:
        return "light";
    }
  };

  // üîπ Xem chi ti·∫øt ƒë∆°n h√†ng
  const handleViewDetails = (order) => {
    Swal.fire({
      title: `ƒê∆°n h√†ng ${order.orderId}`,
      html: `
        <div style="text-align:left">
          <p><strong>Tr·∫°ng th√°i ƒë∆°n h√†ng:</strong> ${order.status}</p>
          <p><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> ${order.payment}</p>
          <p><strong>Tr·∫°ng th√°i thanh to√°n:</strong> ${
            order.paymentStatus || "Ch∆∞a c·∫≠p nh·∫≠t"
          }</p>
          <p><strong>Ng√†y ƒë·∫∑t:</strong> ${
            order.createdAt
              ? new Date(order.createdAt).toLocaleString("vi-VN")
              : "-"
          }</p>
          <p><strong>ƒê·ªãa ch·ªâ giao h√†ng:</strong> ${
            order.address || "Ch∆∞a c·∫≠p nh·∫≠t"
          }, ${order.commune || ""}, ${order.province || ""}</p>
          <hr/>
          <strong>Danh s√°ch s·∫£n ph·∫©m:</strong>
          <ul style="padding-left:16px;">
            ${order.items
              .map(
                (item) =>
                  `<li>${item.name} (${item.quantity} √ó ${item.price.toLocaleString(
                    "vi-VN"
                  )}‚Ç´)</li>`
              )
              .join("")}
          </ul>
          <hr/>
          <p><strong>Ph√≠ giao h√†ng: 30.000ƒë</strong></p>
          <p><strong>T·ªïng ti·ªÅn:</strong> ${(order.total + 30000).toLocaleString(
            "vi-VN"
          )}‚Ç´</p>
        </div>
      `,
      confirmButtonText: "ƒê√≥ng",
      confirmButtonColor: "#dc3545",
      width: 600,
    });
  };

  // üîπ H·ªßy ƒë∆°n h√†ng
  const handleCancelOrder = async (order) => {
    Swal.fire({
      title: "X√°c nh·∫≠n h·ªßy ƒë∆°n?",
      text: "Sau khi h·ªßy, ƒë∆°n h√†ng s·∫Ω kh√¥ng th·ªÉ ph·ª•c h·ªìi.",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#dc3545",
      cancelButtonColor: "#6c757d",
      confirmButtonText: "H·ªßy ƒë∆°n h√†ng",
      cancelButtonText: "Tho√°t",
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          await updateDoc(doc(db, "Orders", order.id), {
            status: "ƒê√£ h·ªßy",
            paymentStatus: "Ho√†n ti·ªÅn",
          });

          setOrders((prev) =>
            prev.map((o) =>
              o.id === order.id
                ? { ...o, status: "ƒê√£ h·ªßy", paymentStatus: "Ho√†n ti·ªÅn" }
                : o
            )
          );

          Swal.fire({
            icon: "success",
            title: "ƒê√£ h·ªßy ƒë∆°n h√†ng",
            text: "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.",
            timer: 2000,
            showConfirmButton: false,
          });
        } catch (err) {
          console.error("üî• L·ªói khi h·ªßy ƒë∆°n h√†ng:", err);
          Swal.fire("L·ªói!", "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng. Th·ª≠ l·∫°i sau.", "error");
        }
      }
    });
  };

  if (loading || fetching) {
    return (
      <div className="d-flex justify-content-center align-items-center vh-100">
        <Spinner animation="border" variant="danger" />
      </div>
    );
  }

  // üîπ B·∫£ng danh s√°ch ƒë∆°n h√†ng
  const renderTable = (data) => (
    <Table responsive bordered hover className="align-middle">
      <thead className="table-light">
        <tr>
          <th>#</th>
          <th>M√£ ƒë∆°n</th>
          <th>Ng√†y ƒë·∫∑t</th>
          <th>Tr·∫°ng th√°i</th>
          <th>T·ªïng ti·ªÅn</th>
          <th>H√†nh ƒë·ªông</th>
        </tr>
      </thead>
      <tbody>
        {data.map((order, index) => (
          <tr key={order.id}>
            <td>{index + 1}</td>
            <td>{order.orderId}</td>
            <td>
              {order.createdAt
                ? new Date(order.createdAt).toLocaleString("vi-VN")
                : "-"}
            </td>
            <td>
              <Badge bg={getBadgeVariant(order.status)}>{order.status}</Badge>
            </td>
            <td>{order.total.toLocaleString("vi-VN")}‚Ç´</td>
            <td className="d-flex gap-2">
              <Button
                size="sm"
                variant="outline-danger"
                onClick={() => handleViewDetails(order)}
              >
                Xem
              </Button>

              {order.status === "Ch·ªù x·ª≠ l√Ω" && (
                <Button
                  size="sm"
                  variant="outline-secondary"
                  onClick={() => handleCancelOrder(order)}
                >
                  H·ªßy ƒë∆°n
                </Button>
              )}
            </td>
          </tr>
        ))}
      </tbody>
    </Table>
  );

  return (
    <div className="orders-page py-5">
      <Container>
        <Card className="shadow-sm border-0 p-4">
          <h4 className="fw-bold text-danger mb-4">ƒê∆°n h√†ng c·ªßa t√¥i</h4>

          <Nav
            variant="tabs"
            activeKey={activeTab}
            onSelect={(key) => setActiveTab(key)}
            className="mb-3"
          >
            <Nav.Item>
              <Nav.Link eventKey="current">ƒê∆°n h√†ng hi·ªán t·∫°i</Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="history">L·ªãch s·ª≠ ƒë∆°n h√†ng</Nav.Link>
            </Nav.Item>
          </Nav>

          {activeTab === "current" ? (
            currentOrders.length ? (
              renderTable(currentOrders)
            ) : (
              <p className="text-center text-muted">
                Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒëang x·ª≠ l√Ω ho·∫∑c giao.
              </p>
            )
          ) : historyOrders.length ? (
            renderTable(historyOrders)
          ) : (
            <p className="text-center text-muted">
              Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o trong l·ªãch s·ª≠.
            </p>
          )}
        </Card>
      </Container>
    </div>
  );
}
