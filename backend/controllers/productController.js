import { db } from "../config/firebase.js";
import {
  collection,
  addDoc,
  doc,
  getDocs,
  deleteDoc,
  updateDoc,
  getDoc,
} from "firebase/firestore";
import { uploadImageToFreeImage } from "../utils/uploadImage.js";

// ğŸŸ¢ ThÃªm sáº£n pháº©m (CHá»ˆ thÃªm má»›i)
export const addProduct = async (req, res) => {
  try {
    const { name, description, price, category } = req.body;
    const imageFiles = req.files?.images;

    if (!name || !description || !price || !category) {
      return res.status(400).json({ message: "Thiáº¿u dá»¯ liá»‡u báº¯t buá»™c" });
    }

    // Upload áº£nh
    const uploadedUrls = [];
    if (imageFiles) {
      const imageArray = Array.isArray(imageFiles) ? imageFiles : [imageFiles];
      for (const file of imageArray) {
        const url = await uploadImageToFreeImage(file.data, file.name);
        uploadedUrls.push(url);
      }
    }

    const timestamp = new Date().toISOString();
    const newProduct = {
      name,
      description,
      category,
      images: uploadedUrls,
      price: Number(price),
      sold: 0,
      stock: 0,
      createdAt: timestamp,
      updatedAt: timestamp,
    };

    // ğŸ”¥ Chá»‰ táº¡o má»›i, khÃ´ng merge
    const docRef = await addDoc(collection(db, "Products"), newProduct);
    res.status(201).json({ ...newProduct, id: docRef.id });
  } catch (err) {
    console.error("ğŸ”¥ Error in addProduct:", err);
    res.status(500).json({ message: "Server error", error: err.message });
  }
};

// ğŸŸ¡ Cáº­p nháº­t sáº£n pháº©m (PUT)
export const updateProduct = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, description, price, category, existingImages } = req.body;
    const imageFiles = req.files?.images;

    const docRef = doc(db, "Products", id);
    const docSnap = await getDoc(docRef);

    if (!docSnap.exists()) {
      return res.status(404).json({ message: "KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m" });
    }

    // Upload áº£nh má»›i
    const uploadedUrls = [];
    if (imageFiles) {
      const imageArray = Array.isArray(imageFiles) ? imageFiles : [imageFiles];
      for (const file of imageArray) {
        const url = await uploadImageToFreeImage(file.data, file.name);
        uploadedUrls.push(url);
      }
    }

    // Gá»™p áº£nh cÅ© + má»›i
    let mergedImages = uploadedUrls;
    if (existingImages) {
      const oldImages = JSON.parse(existingImages);
      mergedImages = [...oldImages, ...uploadedUrls];
    }

    const updatedData = {
      name,
      description,
      category,
      images: mergedImages,
      price: Number(price),
      updatedAt: new Date().toISOString(),
    };

    await updateDoc(docRef, updatedData);
    res.status(200).json({ ...updatedData, id });
  } catch (err) {
    console.error("ğŸ”¥ Error in updateProduct:", err);
    res.status(500).json({ message: "Server error", error: err.message });
  }
};

// ğŸŸ£ Láº¥y danh sÃ¡ch sáº£n pháº©m
export const getProducts = async (req, res) => {
  try {
    const snapshot = await getDocs(collection(db, "Products"));
    const products = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    res.status(200).json(products);
  } catch (err) {
    console.error("ğŸ”¥ Error in getProducts:", err);
    res.status(500).json({ message: "Server error", error: err.message });
  }
};

// ğŸ”´ XÃ³a sáº£n pháº©m
export const deleteProduct = async (req, res) => {
  try {
    const { id } = req.params;
    await deleteDoc(doc(db, "Products", id));
    res.status(200).json({ message: "XÃ³a sáº£n pháº©m thÃ nh cÃ´ng" });
  } catch (err) {
    console.error("ğŸ”¥ Error in deleteProduct:", err);
    res.status(500).json({ message: "Server error", error: err.message });
  }
};
