import React, { useState, useEffect } from "react";
import toast from "react-hot-toast";
import "../Style/AddProduct.css";

const AddProduct = ({ onSave, onClose, product }) => {
  const isEdit = !!product;
  const [isSubmitting, setIsSubmitting] = useState(false);

  const categories = [
    "Thi·∫øt b·ªã nh√† b·∫øp",
    "M√°y l·ªçc kh√¥ng kh√≠",
    "ƒê√®n & chi·∫øu s√°ng",
    "D·ª•ng c·ª• v·ªá sinh",
    "ƒê·ªì d√πng ph√≤ng t·∫Øm",
    "ƒê·ªì ƒëi·ªán gia d·ª•ng nh·ªè",
    "ChƒÉm s√≥c c√° nh√¢n",
    "Thi·∫øt b·ªã gi·∫∑t s·∫•y",
    "Gia d·ª•ng th√¥ng minh",
    "N·ªôi th·∫•t & trang tr√≠",
  ];

  const [formData, setFormData] = useState({
    id: "",
    name: "",
    category: "",
    price: "",
    description: "",
    color: "",
    material: "",
    size: "",
    images: [],
  });

  // Khi ch·ªânh s·ª≠a ho·∫∑c th√™m m·ªõi
  useEffect(() => {
    if (isEdit && product) {
      setFormData({
        id: product.id || "",
        name: product.name || "",
        category: product.category || "",
        price: product.price || "",
        description: product.description || "",
        color: product.color || "",
        material: product.material || "",
        size: product.size || "",
        images: product.images || [],
      });
    } else {
      setFormData({
        id: "",
        name: "",
        category: "",
        price: "",
        description: "",
        color: "",
        material: "",
        size: "",
        images: [],
      });
    }
  }, [isEdit, product]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleImageChange = (e) => {
    const files = Array.from(e.target.files);
    const fileData = files.map((file) => ({
      file,
      preview: URL.createObjectURL(file),
    }));
    setFormData((prev) => ({ ...prev, images: fileData }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (isSubmitting) return;
    setIsSubmitting(true);

    try {
      await onSave?.(formData);
      toast.success(isEdit ? "‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng" : "üéâ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng");
      setTimeout(() => onClose?.(), 500);
    } catch (error) {
      toast.error("‚ùå L∆∞u th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i");
      console.error("‚ùå L·ªói khi l∆∞u s·∫£n ph·∫©m:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="add-product-container">
      <div className="add-product-form">
        <h2>{isEdit ? "Ch·ªânh s·ª≠a s·∫£n ph·∫©m" : "Th√™m s·∫£n ph·∫©m m·ªõi"}</h2>
        <form onSubmit={handleSubmit}>
           <div className="form-left">
          {/* Firestore ID */}
          <label>M√£ s·∫£n ph·∫©m (ID Firestore)</label>
          <input
            type="text"
            name="id"
            value={formData.id || "S·∫Ω ƒë∆∞·ª£c t·∫°o sau khi l∆∞u"}
            readOnly
            className="readonly-input"
          />

          {/* T√™n s·∫£n ph·∫©m */}
          <label>T√™n s·∫£n ph·∫©m</label>
          <input name="name" value={formData.name} onChange={handleChange} required />

          {/* Danh m·ª•c */}
          <label>Danh m·ª•c</label>
          <select name="category" value={formData.category} onChange={handleChange} required>
            <option value="">-- Ch·ªçn danh m·ª•c --</option>
            {categories.map((cat) => (
              <option key={cat} value={cat}>
                {cat}
              </option>
            ))}
          </select>

          {/* Gi√° */}
          <label>Gi√° (VNƒê)</label>
          <input
            type="number"
            name="price"
            value={formData.price}
            onChange={handleChange}
            min="0"
            required
          />

          {/* üîπ M√†u s·∫Øc */}
          <label>M√†u s·∫Øc</label>
          <input
            type="text"
            name="color"
            placeholder="VD: Tr·∫Øng, ƒêen, X√°m..."
            value={formData.color}
            onChange={handleChange}
          />

          {/* üîπ Ch·∫•t li·ªáu */}
          <label>Ch·∫•t li·ªáu</label>
          <input
            type="text"
            name="material"
            placeholder="VD: Inox, Nh·ª±a ABS, G·ªó, ..."
            value={formData.material}
            onChange={handleChange}
          />

          {/* üîπ K√≠ch th∆∞·ªõc */}
          <label>K√≠ch th∆∞·ªõc</label>
          <input
            type="text"
            name="size"
            placeholder="VD: 30x40cm, 15x20x10cm..."
            value={formData.size}
            onChange={handleChange}
          />
        </div>

          <div className="form-right">
          {/* M√¥ t·∫£ */}
          <label>M√¥ t·∫£</label>
          <textarea name="description" value={formData.description} onChange={handleChange} required />

          {/* H√¨nh ·∫£nh */}
          <label>H√¨nh ·∫£nh</label>
          <input type="file" multiple accept="image/*" onChange={handleImageChange} />
          <div className="preview-images">
            {(formData.images || []).map((img, index) => {
              const src = typeof img === "string" ? img : img.preview;
              return <img key={index} src={src} alt={`preview-${index}`} />;
            })}
          </div>

          {/* N√∫t */}
          <div className="form-actions">
            <button type="submit" disabled={isSubmitting}>
              {isSubmitting
                ? "ƒêang x·ª≠ l√Ω..."
                : isEdit
                ? "C·∫≠p nh·∫≠t"
                : "Th√™m s·∫£n ph·∫©m"}
            </button>
            <button type="button" onClick={onClose}>H·ªßy</button>
          </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddProduct;
