import React, { useEffect, useState } from "react";
import { collection, getDocs, updateDoc, doc, deleteDoc } from "firebase/firestore";
import { db } from "../Config/firebase-config";
import "../Style/User.css";

const User = () => {
  const [users, setUsers] = useState([]);
  const [filter, setFilter] = useState("");
  const [roleFilter, setRoleFilter] = useState("T·∫•t c·∫£");
  const [selectedUser, setSelectedUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const roleMap = {
  "Kh√°ch h√†ng": ["kh√°ch h√†ng", "customer", "user"],
  "Qu·∫£n tr·ªã vi√™n": ["qu·∫£n tr·ªã vi√™n", "admin"],
};

  // ‚úÖ L·∫•y danh s√°ch ng∆∞·ªùi d√πng t·ª´ Firestore
  useEffect(() => {
    const fetchUsers = async () => {
      try {
        setLoading(true);
        const querySnapshot = await getDocs(collection(db, "Users"));
        const data = querySnapshot.docs.map((d) => ({
          id: d.id,
          ...d.data(),
        }));
        setUsers(data);
      } catch (err) {
        console.error("üî• L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", err);
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng!");
      } finally {
        setLoading(false);
      }
    };

    fetchUsers();
  }, []);

  // ‚úÖ L·ªçc danh s√°ch
  const filteredUsers = users.filter((u) => {
    const nameMatch = u.fullname?.toLowerCase().includes(filter.toLowerCase());
    const roleMatch =
      roleFilter === "T·∫•t c·∫£" ||
      (u.role &&
        roleMap[roleFilter]?.includes(u.role.toLowerCase()));
    return nameMatch && roleMatch;
  });

  // ‚úÖ X√≥a ng∆∞·ªùi d√πng
  const handleDelete = async (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y kh√¥ng?")) {
      try {
        await deleteDoc(doc(db, "Users", id));
        setUsers((prev) => prev.filter((u) => u.id !== id));
        alert("ƒê√£ x√≥a ng∆∞·ªùi d√πng!");
      } catch (err) {
        console.error("üî• L·ªói khi x√≥a ng∆∞·ªùi d√πng:", err);
        alert("Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng!");
      }
    }
  };

  // ‚úÖ Kh√≥a / M·ªü kh√≥a ng∆∞·ªùi d√πng
  const toggleStatus = async (user) => {
    const newStatus = user.status === "Ho·∫°t ƒë·ªông" ? "B·ªã kh√≥a" : "Ho·∫°t ƒë·ªông";
    try {
      await updateDoc(doc(db, "Users", user.id), { status: newStatus });
      setUsers((prev) =>
        prev.map((u) =>
          u.id === user.id ? { ...u, status: newStatus } : u
        )
      );
    } catch (err) {
      console.error("üî• L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
    }
  };

  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center vh-100">
        <div className="spinner-border text-danger" role="status">
          <span className="visually-hidden">ƒêang t·∫£i...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return <p className="text-center text-danger mt-5">{error}</p>;
  }

  return (
    <div className="user-container">
      <div className="user-header">
        <h4>Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h4>
      </div>

      {/* B·ªô l·ªçc */}
      <div className="user-filter">
        <input
          type="text"
          placeholder="T√¨m ki·∫øm theo t√™n..."
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
        />
        <select
          value={roleFilter}
          onChange={(e) => setRoleFilter(e.target.value)}
        >
          <option>T·∫•t c·∫£</option>
          <option>Kh√°ch h√†ng</option>
          <option>Qu·∫£n tr·ªã vi√™n</option>
        </select>
      </div>

      {/* B·∫£ng ng∆∞·ªùi d√πng */}
      {filteredUsers.length === 0 ? (
        <p className="no-data">Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o.</p>
      ) : (
        <table className="user-table">
          <thead>
            <tr>
              <th>H·ªç t√™n</th>
              <th>Email</th>
              <th>S·ªë ƒëi·ªán tho·∫°i</th>
              <th>Vai tr√≤</th>
              <th>Tr·∫°ng th√°i</th>
              <th>Ng√†y tham gia</th>
              <th>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {filteredUsers.map((u) => (
              <tr key={u.id}>
                <td>{u.fullname || u.name}</td>
                <td>{u.email}</td>
                <td>{u.phone}</td>
                <td>{u.role}</td>
                <td>
                  <span
                    className={`status ${
                      u.status === "Ho·∫°t ƒë·ªông" ? "active" : "blocked"
                    }`}
                  >
                    {u.status}
                  </span>
                </td>
                <td>
                  {u.createdAt
                    ? (u.createdAt.toDate
                        ? u.createdAt.toDate().toLocaleDateString("vi-VN")
                        : new Date(u.createdAt).toLocaleDateString("vi-VN"))
                    : "-"}
                </td>
                <td>
                  <button onClick={() => setSelectedUser(u)}>Xem</button>
                  <button onClick={() => toggleStatus(u)}>
                    {u.status === "Ho·∫°t ƒë·ªông" ? "Kh√≥a" : "M·ªü kh√≥a"}
                  </button>
                  <button className="danger" onClick={() => handleDelete(u.id)}>
                    X√≥a
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}

      {/* Modal chi ti·∫øt ng∆∞·ªùi d√πng */}
      {selectedUser && (
        <div className="user-modal">
          <div className="user-modal-content">
            <h5>Chi ti·∫øt ng∆∞·ªùi d√πng</h5>
            <p>
              <strong>H·ªç t√™n:</strong> {selectedUser.fullname || selectedUser.name}
            </p>
            <p>
              <strong>Email:</strong> {selectedUser.email}
            </p>
            <p>
              <strong>ƒêi·ªán tho·∫°i:</strong> {selectedUser.phone}
            </p>
            <p>
              <strong>Vai tr√≤:</strong> {selectedUser.role}
            </p>
            <p>
              <strong>Tr·∫°ng th√°i:</strong>{" "}
              <span
                style={{
                  color:
                    selectedUser.status === "Ho·∫°t ƒë·ªông" ? "#28a745" : "#999",
                  fontWeight: 600,
                }}
              >
                {selectedUser.status}
              </span>
            </p>
            <hr />
            <p>
              <strong>ƒê·ªãa ch·ªâ:</strong> {selectedUser.address || "‚Äî"}
            </p>
            <p>
              <strong>Ph∆∞·ªùng/X√£:</strong> {selectedUser.commune || "‚Äî"}
            </p>
            <p>
              <strong>T·ªânh/Th√†nh ph·ªë:</strong> {selectedUser.province || "‚Äî"}
            </p>
            <hr />
            <p>
              <strong>Ng√†y tham gia:</strong>{" "}
              {selectedUser.createdAt
                ? (selectedUser.createdAt.toDate
                    ? selectedUser.createdAt.toDate().toLocaleDateString("vi-VN")
                    : new Date(selectedUser.createdAt).toLocaleDateString("vi-VN"))
                : "‚Äî"}
            </p>
            <button
              className="close-btn"
              onClick={() => setSelectedUser(null)}
            >
              ƒê√≥ng
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default User;
