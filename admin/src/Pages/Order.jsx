import React, { useState } from "react";
import "../Style/Order.css";
import { printInvoice } from "../Components/InvoicePrint";


const Order = () => {
  const [orders, setOrders] = useState([
    {
      id: 1,
      code: "DH001",
      customer: "Nguy·ªÖn VƒÉn A",
      date: "2025-10-22",
      total: 1250000,
      status: "Ho√†n th√†nh",
      paid: true,
      address: "123 Nguy·ªÖn VƒÉn Linh, Qu·∫≠n 7, TP.HCM",
      note: "Giao bu·ªïi s√°ng",
      products: [
        { name: "N·ªìi c∆°m ƒëi·ªán Sharp", qty: 1, price: 850000 },
        { name: "B·∫øp gas mini", qty: 1, price: 400000 },
      ],
      shipping: {
        carrier: "Giao H√†ng Nhanh",
        trackingCode: "GHN123456789",
        currentStatus: "delivered",
      },
    },
    {
      id: 2,
      code: "DH002",
      customer: "Tr·∫ßn Th·ªã B",
      date: "2025-10-21",
      total: 499000,
      status: "ƒêang giao",
      paid: false,
      address: "45 Nguy·ªÖn Tr√£i, Qu·∫≠n 5, TP.HCM",
      note: "G·ªçi tr∆∞·ªõc khi giao",
      products: [{ name: "B√¨nh ƒëun si√™u t·ªëc", qty: 1, price: 499000 }],
      shipping: {
        carrier: "Giao H√†ng Ti·∫øt Ki·ªám",
        trackingCode: "GHTK987654321",
        currentStatus: "in_transit",
      },
    },
    {
      id: 3,
      code: "DH003",
      customer: "L√™ VƒÉn C",
      date: "2025-10-23",
      total: 850000,
      status: "Ch·ªù x·ª≠ l√Ω",
      paid: false,
      address: "78 Pasteur, Qu·∫≠n 1, TP.HCM",
      note: "",
      products: [{ name: "M√°y s·∫•y t√≥c Philips", qty: 2, price: 425000 }],
      shipping: null,
    },
  ]);

  const [filter, setFilter] = useState("");
  const [dateFilter, setDateFilter] = useState("");
  const [statusFilter, setStatusFilter] = useState("T·∫•t c·∫£ tr·∫°ng th√°i");
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const ordersPerPage = 5;

  // ‚úÖ H√†m t·∫°o m√£ v·∫≠n ƒë∆°n ng·∫´u nhi√™n (gi·∫£ l·∫≠p)
  const generateTrackingCode = () => {
    const prefix = ["GHN", "GHTK", "VNPOST"];
    const randomPrefix = prefix[Math.floor(Math.random() * prefix.length)];
    const randomNumber = Math.floor(100000000 + Math.random() * 900000000);
    return `${randomPrefix}${randomNumber}`;
  };

  // ‚úÖ T·∫°o v·∫≠n chuy·ªÉn (gi·∫£ l·∫≠p)
  const handleCreateShipment = (id) => {
    setOrders((prev) =>
      prev.map((o) => {
        if (o.id !== id) return o;

        const trackingCode = generateTrackingCode();

        return {
          ...o,
          status: "ƒêang giao",
          shipping: {
            carrier: trackingCode.startsWith("GHN")
              ? "Giao H√†ng Nhanh"
              : trackingCode.startsWith("GHTK")
              ? "Giao H√†ng Ti·∫øt Ki·ªám"
              : "VNPost",
            trackingCode,
            currentStatus: "picked_up",
          },
        };
      })
    );
    alert("‚úÖ ƒê√£ t·∫°o ƒë∆°n v·∫≠n chuy·ªÉn v√† chuy·ªÉn sang tr·∫°ng th√°i 'ƒêang giao'");
  };

  // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (gi·∫£ l·∫≠p)
  const handleStatusChange = (id, newStatus) => {
    setOrders((prev) =>
      prev.map((o) => {
        if (o.id !== id) return o;

        let updatedPaid = o.paid;

        // ‚úÖ Logic ƒë·ªìng b·ªô thanh to√°n
        if (newStatus === "Ho√†n th√†nh") updatedPaid = true;
        if (newStatus === "ƒê√£ h·ªßy") updatedPaid = false;

        return { ...o, status: newStatus, paid: updatedPaid };
      })
    );
  };

  // ‚úÖ L·ªçc
  const filteredOrders = orders
    .filter((o) => o.customer.toLowerCase().includes(filter.toLowerCase()))
    .filter((o) => (dateFilter ? o.date.startsWith(dateFilter) : true))
    .filter((o) =>
      statusFilter === "T·∫•t c·∫£ tr·∫°ng th√°i" ? true : o.status === statusFilter
    );

  const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);
  const indexOfLastOrder = currentPage * ordersPerPage;
  const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;
  const currentOrders = filteredOrders.slice(
    indexOfFirstOrder,
    indexOfLastOrder
  );

  return (
    <div className="order-container">
      <div className="order-header">
        <h4>Qu·∫£n l√Ω ƒë∆°n h√†ng</h4>
        <div className="order-actions">
          <button className="btn-refresh">üîÑ L√†m m·ªõi</button>
          <button className="btn-add">‚ûï Th√™m ƒë∆°n h√†ng</button>
        </div>
      </div>

      {/* B·ªô l·ªçc */}
      <div className="order-filter">
        <input
          type="text"
          placeholder="üîç T√¨m theo kh√°ch h√†ng..."
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
        />
        <input
          type="date"
          value={dateFilter}
          onChange={(e) => setDateFilter(e.target.value)}
        />
        <select
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value)}
        >
          <option>T·∫•t c·∫£ tr·∫°ng th√°i</option>
          <option>Ch·ªù x·ª≠ l√Ω</option>
          <option>ƒêang giao</option>
          <option>Ho√†n th√†nh</option>
          <option>ƒê√£ h·ªßy</option>
        </select>
      </div>

      {/* B·∫£ng ƒë∆°n h√†ng */}
      {filteredOrders.length === 0 ? (
        <p className="no-data">Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o.</p>
      ) : (
        <>
          <table className="order-table">
            <thead>
              <tr>
                <th>M√£ ƒë∆°n</th>
                <th>Kh√°ch h√†ng</th>
                <th>Ng√†y ƒë·∫∑t</th>
                <th>T·ªïng ti·ªÅn</th>
                <th>Tr·∫°ng th√°i</th>
                <th>Thanh to√°n</th>
                <th>Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {currentOrders.map((o) => {
                const isLocked =
                  o.status === "Ho√†n th√†nh" || o.status === "ƒê√£ h·ªßy";
                return (
                  <tr key={o.id}>
                    <td>{o.code}</td>
                    <td>{o.customer}</td>
                    <td>{o.date}</td>
                    <td>{o.total.toLocaleString()} ‚Ç´</td>
                    <td>
                      <select
                        value={o.status}
                        onChange={(e) =>
                          handleStatusChange(o.id, e.target.value)
                        }
                        className={`status-dropdown ${o.status.toLowerCase()}`}
                        disabled={isLocked}
                      >
                        <option>Ch·ªù x·ª≠ l√Ω</option>
                        <option>ƒêang giao</option>
                        <option>Ho√†n th√†nh</option>
                        <option>ƒê√£ h·ªßy</option>
                      </select>
                    </td>
                    <td>
                      {o.paid ? (
                        <span className="paid">ƒê√£ thanh to√°n</span>
                      ) : (
                        <span className="unpaid">Ch∆∞a thanh to√°n</span>
                      )}
                    </td>
                    <td>
                      <button onClick={() => setSelectedOrder(o)}>Xem</button>

                      {o.status === "Ch·ªù x·ª≠ l√Ω" && (
                        <button
                          className="ship-btn"
                          onClick={() => handleCreateShipment(o.id)}
                        >
                          üöö T·∫°o v·∫≠n chuy·ªÉn
                        </button>
                      )}

                      <button className="danger">X√≥a</button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>

          {/* Ph√¢n trang */}
          <div className="pagination">
            <button
              onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
              disabled={currentPage === 1}
            >
              ‚Üê Tr∆∞·ªõc
            </button>
            <span>
              Trang {currentPage} / {totalPages}
            </span>
            <button
              onClick={() =>
                setCurrentPage((p) => Math.min(p + 1, totalPages))
              }
              disabled={currentPage === totalPages}
            >
              Sau ‚Üí
            </button>
          </div>
        </>
      )}

      {/* Modal chi ti·∫øt */}
      {selectedOrder && (
        <div className="order-modal">
          <div className="order-modal-content">
            <h5>üßæ Chi ti·∫øt ƒë∆°n h√†ng {selectedOrder.code}</h5>
            <p>
              <strong>Kh√°ch h√†ng:</strong> {selectedOrder.customer}
            </p>
            <p>
              <strong>ƒê·ªãa ch·ªâ:</strong> {selectedOrder.address}
            </p>
            <p>
              <strong>Ghi ch√∫:</strong> {selectedOrder.note || "Kh√¥ng c√≥"}
            </p>

            <h6>Danh s√°ch s·∫£n ph·∫©m:</h6>
            <ul>
              {selectedOrder.products.map((p, i) => (
                <li key={i}>
                  {p.name} ‚Äî {p.qty} x {p.price.toLocaleString()} ‚Ç´
                </li>
              ))}
            </ul>

            <p>
              <strong>T·ªïng ti·ªÅn:</strong>{" "}
              {selectedOrder.total.toLocaleString()} ‚Ç´
            </p>
            <p>
              <strong>Thanh to√°n:</strong>{" "}
              {selectedOrder.paid ? "‚úÖ ƒê√£ thanh to√°n" : "‚ùå Ch∆∞a thanh to√°n"}
            </p>

            {/* ‚úÖ Th√¥ng tin v·∫≠n chuy·ªÉn */}
            {selectedOrder.shipping && (
              <>
                <hr />
                <p>
                  <strong>ƒê∆°n v·ªã v·∫≠n chuy·ªÉn:</strong>{" "}
                  {selectedOrder.shipping.carrier}
                </p>
                <p>
                  <strong>M√£ v·∫≠n ƒë∆°n:</strong>{" "}
                  {selectedOrder.shipping.trackingCode}
                </p>
                <p>
                  <strong>Tr·∫°ng th√°i giao:</strong>{" "}
                  {selectedOrder.shipping.currentStatus === "picked_up"
                    ? "üì¶ ƒê√£ l·∫•y h√†ng"
                    : selectedOrder.shipping.currentStatus === "in_transit"
                    ? "üöö ƒêang giao"
                    : selectedOrder.shipping.currentStatus === "delivered"
                    ? "‚úÖ ƒê√£ giao th√†nh c√¥ng"
                    : "Ch∆∞a giao"}
                </p>
              </>
            )}

            <button
              className="close-btn"
              onClick={() => setSelectedOrder(null)}
            >
              ƒê√≥ng
            </button>
            <button
              className="print-btn"
              onClick={() => printInvoice(selectedOrder)}
            >
               In h√≥a ƒë∆°n
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Order;
